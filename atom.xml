<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>skyJC</title>
  <subtitle>Android探索的道路，是否愿意陪我一起？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jincanshen.com/"/>
  <updated>2016-08-29T12:42:49.000Z</updated>
  <id>http://www.jincanshen.com/</id>
  
  <author>
    <name>skyJC</name>
    <email>jincan0213@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>问题汇总</title>
    <link href="http://www.jincanshen.com/2016/08/29/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://www.jincanshen.com/2016/08/29/问题汇总/</id>
    <published>2016-08-29T11:56:00.000Z</published>
    <updated>2016-08-29T12:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>定期更新问题</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;定期更新问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sky架构简单使用</title>
    <link href="http://www.jincanshen.com/2016/08/26/Sky%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.jincanshen.com/2016/08/26/Sky架构/</id>
    <published>2016-08-26T04:15:32.000Z</published>
    <updated>2016-08-27T07:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论MVC或是MVP模式都不可避免地存在一个弊端：<br><code>额外的代码复杂度及学习成本</code></p>
<a id="more"></a>
<h2 id="MVP和MVC"><a href="#MVP和MVC" class="headerlink" title="MVP和MVC"></a>MVP和MVC</h2><p>无论MVC或是MVP模式都不可避免地存在一个弊端：<br><code>额外的代码复杂度及学习成本</code></p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><pre><code>1、View接受用户的交互请求
2、View将请求转交给Controller
3、Controller操作Model进行数据更新
4、数据更新之后，Model通知View数据变化
5、View显示更新之后的数据
</code></pre><p><img src="https://skyJinc.github.io/images/sky架构/2.png" alt="图1"></p>
<h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><pre><code>1、View接受用户的交互请求
2、View将请求转交给Presenter
3、Presenter操作Model进行数据库更新
4、数据更新之后，Model通知Presenter数据发生变化
5、Presenter更新View的数据
</code></pre><p><img src="https://skyJinc.github.io/images/sky架构/3.png" alt="图1"></p>
<p>说明：presenter  我这里说要用biz(business)代替</p>
<h2 id="Sky简介"><a href="#Sky简介" class="headerlink" title="Sky简介"></a>Sky简介</h2><p>开头已经说了，无论MVC或是MVP模式都不可避免地存在一个弊端：<code>额外的代码复杂度及学习成本</code>  </p>
<p>Sky开发架构都优化了那些问题</p>
<h3 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h3><p>因为通过接口交互，所以每一个View(Activity,Fragment,DialogFragment…) 都会多一个IView接口，一个IBiz和实现类Biz.</p>
<p>以Activity为例, 文件数量从1个变成了4个.<br><img src="https://skyJinc.github.io/images/sky架构/4.png" alt="图1"></p>
<p>Sky架构做了调整，采用一个Java文件  包含 接口 和 类</p>
<p><img src="https://skyJinc.github.io/images/sky架构/5.png" alt="图1"></p>
<p>这里要说到Java文件的限制，一个类文件只能有一个<strong><em>public class</em></strong> 而Activity在AndroidManifest里必须是public，所以业务接口(IBiz)可以声明成public，而Activity不可以</p>
<p>Biz<br><img src="https://skyJinc.github.io/images/sky架构/6.png" alt="图1"></p>
<p>Activity<br><img src="https://skyJinc.github.io/images/sky架构/7.png" alt="图1"></p>
<h3 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h3><p>activity 和 biz 依赖的问题</p>
<p>正常的依赖关系<br>Activity<br><img src="https://skyJinc.github.io/images/sky架构/8.png" alt="图1"><br>Biz<br><img src="https://skyJinc.github.io/images/sky架构/11.png" alt="图1"></p>
<p>Sky架构做了调整，采用泛型+注解方式依赖</p>
<p>Activity<br><img src="https://skyJinc.github.io/images/sky架构/9.png" alt="图1"></p>
<p>Biz<br><img src="https://skyJinc.github.io/images/sky架构/10.png" alt="图1"></p>
<h4 id="Impl-注解"><a href="#Impl-注解" class="headerlink" title="@Impl  注解"></a>@Impl  注解</h4><p>可以看到Activity接口和Biz接口中都注解了@Impl(实现类.class)</p>
<p>通过@Impl 获取实现类class 获取实例</p>
<p><img src="https://skyJinc.github.io/images/sky架构/12.png" alt="图1"></p>
<h3 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h3><p>SKYHelper 提供一下接口方便全局使用</p>
<pre><code>display(Class&lt;D&gt; eClass)；跳转

biz(Class&lt;B&gt; service)； 业务

isExist(Class&lt;B&gt; service)； 业务类存不存在(因为业务类是根据View声明周期走)

bizList(Class&lt;B&gt; service)； 业务类 批量获取

common(Class&lt;B&gt; service)； 公共业务

http(Class&lt;H&gt; httpClazz)； 网络

interfaces(Class&lt;I&gt; implClazz)； 接口

screenHelper();Activity 管理器

threadPoolHelper()； 线程池管理器 

mainLooper()；主线程

downloader()； 下载管理器

toast()；提示信息

contact()； 系统通讯录管理器

fileCacheManage()； 文件缓存管理器
</code></pre><p>-帮助类可以自定义，保留以上的接口，自定义helper</p>
<p>-继承 SKYModulesManage  和 SKYHelper 来自定义</p>
<p>例子 自定义数据库管理</p>
<p><img src="https://skyJinc.github.io/images/sky架构/13.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/14.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/15.png" alt="图1"></p>
<p>注意 ： SKYModulesManage 不用关心单例和重复创建的问题，因为统一由Application管理，当然也可以不继承SKYModulesManage 自己来处理 </p>
<h3 id="第四个"><a href="#第四个" class="headerlink" title="第四个"></a>第四个</h3><p>1.View（Activity,Fragment,DialogFragment）,Biz, Display(跳转调度), Commom(公共业务)，http, 还是以@Impl注解的接口都被代理， 进行解析方法注解</p>
<p>2.因为解析每一个方法的注解，比较耗时，采用了缓存策略,缓存接口的每一个方法，不会进行第二次解析…(思路来自<a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a>)</p>
<p>3.除了View和Biz的实例（创建和销毁），缓存是跟着View生命周期走，其他的都实例缓存都统一由缓存管理器进行统一管理</p>
<h2 id="SKY简单使用"><a href="#SKY简单使用" class="headerlink" title="SKY简单使用"></a>SKY简单使用</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>架构里使用<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a> 所以 需要指定的插件</p>
<p> <strong><em>classpath ‘com.neenbedankt.gradle.plugins:android-apt:1.8’</em></strong></p>
<p>第一步 - build.gradle 文件</p>
<pre><code>buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &apos;com.android.tools.build:gradle:2.1.2&apos;
        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;
    }
}        

allprojects {
    repositories {
        jcenter()
        //远程仓库
        maven { url &quot;https://github.com/J2W/mvn-repo-j2w/raw/master/repository&quot; }
   ｝
｝
</code></pre><p>第二步 - app/build.gradle</p>
<pre><code>apply plugin: &apos;android-apt&apos;

dependencies {
       compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])
       compile &apos;jc:sky:1.4&apos;//请看github最新版本
    apt &apos;com.jakewharton:butterknife-compiler:8.2.1&apos;
}
</code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>实现 ISKYBind </p>
<pre><code>//架构日志开关
boolean isLogOpen();

 //网络适配器
Retrofit getRestAdapter(Builder var1);

//方法拦截器
SKYMethods getMethodInterceptor(jc.sky.modules.methodProxy.SKYMethods.Builder var1);

//核心 -  配置管理器
SKYModulesManage getModulesManage();


//在Application的onCreate里绑定
Application - onCreate -&gt; SKYHelper.bind(ISKYBind)
</code></pre><p>实现类可以是Application 也可以自定义</p>
<p>以Demo项目为例子</p>
<p><img src="https://skyJinc.github.io/images/sky架构/16.png" alt="图1"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建Activity和Biz 手动创建很麻烦，所以 我写了一个模板 </p>
<p>AndroidStudio -&gt;设置-&gt; Editor-&gt;File And Code Templates</p>
<p>Activity模板例子  <strong><em><a href="https://github.com/skyJinc/sky/wiki/%E7%BB%93%E6%9E%84%E6%A8%A1%E6%9D%BF" target="_blank" rel="external">参考</a></em></strong></p>
<pre><code>import android.os.Bundle;
import jc.sky.core.Impl;
import jc.sky.view.SKYBuilder;
import jc.sky.view.SKYActivity;

/**
 * @创建人 ${USER}
 * @创建时间 ${DATE} ${TIME}
 * @类描述 一句话描述你的UI
 */
public class ${NAME}Activity extends SKYActivity&lt;I${NAME}Biz&gt; implements I${NAME}Activity {

    @Override protected SKYBuilder build(SKYBuilder skyBuilder) {
        return skyBuilder;
    }

    @Override protected void initData(Bundle bundle) {

    }

}
@Impl(${NAME}Activity.class)
interface I${NAME}Activity {

}
</code></pre><p><img src="https://skyJinc.github.io/images/sky架构/17.png" alt="图1"></p>
<p>####开始写业务</p>
<p>#####创建<br>继承 SKYActivity - 采用了建造者模式 进行配置</p>
<p>页面<br><img src="https://skyJinc.github.io/images/sky架构/18.png" alt="图1"></p>
<p>Activity<br><img src="https://skyJinc.github.io/images/sky架构/19.png" alt="图1"></p>
<p>SKYBuilder 里有很多配置，主要的是 layoutId 设置布局文件</p>
<p>Biz<br><img src="https://skyJinc.github.io/images/sky架构/20.png" alt="图1"></p>
<h5 id="业务逻辑-注解使用"><a href="#业务逻辑-注解使用" class="headerlink" title="业务逻辑 - 注解使用"></a>业务逻辑 - 注解使用</h5><p>登陆后打印账号和密码，模拟网络请求 延迟3秒钟<br><img src="https://skyJinc.github.io/images/sky架构/21.png" alt="图1"><br><img src="https://skyJinc.github.io/images/sky架构/22.png" alt="图1"></p>
<p>这里你们会看到 这个不是在主线程执行 线程等待嘛？<br>是的, 所以我们需要给业务接口增加注释，告诉它你是需要在子线程执行的</p>
<p><img src="https://skyJinc.github.io/images/sky架构/23.png" alt="图1"></p>
<p>提供了三种线程池</p>
<pre><code>HTTP 专门提供给网络请求使用
WORK 专门给IO操作，数据库查询等使用
SINGLEWORK 专门给需要队列形式，一个一个执行使用（比如数据库插入操作，必须是队列形式）
</code></pre><h5 id="业务逻辑-如何回调"><a href="#业务逻辑-如何回调" class="headerlink" title="业务逻辑 - 如何回调"></a>业务逻辑 - 如何回调</h5><p>Activity 和 Biz　是如何互相调用　和　访问的呢？</p>
<p>在注解使用中　我们看到Activity 点击事件 调用了<strong><em>biz()</em></strong>.login() 来执行业务</p>
<p>在biz里 可以使用 <strong><em>ui()</em></strong> 来进行回调</p>
<p>在View层接口里 声明两个接口，一个是用于开关进度条，一个是用于修改登陆按钮名称</p>
<p><img src="https://skyJinc.github.io/images/sky架构/24.png" alt="图1"></p>
<p>biz 里 进行调用</p>
<p><img src="https://skyJinc.github.io/images/sky架构/25.png" alt="图1"></p>
<p>可能有人会问，在子线程里 修改Button的名字 会报错的，因为只有在主线程修改。。。</p>
<p>是的, 可是运行Demo你会发现居然是可以的，因为仔细看过上面介绍的朋友会知道，我们View层和Biz层 都被动态代理了，所以 调用UI() 会自动判定是在主线程还是子线程</p>
<h5 id="业务逻辑-防止重复执行"><a href="#业务逻辑-防止重复执行" class="headerlink" title="业务逻辑 - 防止重复执行"></a>业务逻辑 - 防止重复执行</h5><p>很多开发的时候大家为了防止一个业务多次调用，会通过各种方式 来判定这个方法有没有在执行，如果在执行，就忽略掉～～</p>
<p>sky架构的所有业务接口都是防止重复执行的</p>
<p><img src="https://skyJinc.github.io/images/sky架构/26.png" alt="图1"></p>
<p>循环调用了三次，只有一次执行成功，因为防止重复执行，所以只有方法真正执行完毕后才能继续调用，也可以注解允许重复执行，<strong><em>@Repeat(true)</em></strong> 默认是fasle</p>
<p><img src="https://skyJinc.github.io/images/sky架构/27.png" alt="图1"></p>
<h5 id="业务逻辑-列表页"><a href="#业务逻辑-列表页" class="headerlink" title="业务逻辑 - 列表页"></a>业务逻辑 - 列表页</h5><p>创建列表页面  我使用的是mac所以快捷键是 command + n  选择SKYActivity 和 SKYIBiz-Activity , 也可以直接选择对应的包，调出菜单</p>
<p><img src="https://skyJinc.github.io/images/sky架构/28.png" alt="图1"></p>
<p>输入名字</p>
<p><img src="https://skyJinc.github.io/images/sky架构/29.png" alt="图1"></p>
<p>创建适配器</p>
<pre><code>继承 SKYRVAdapter&lt;Model,Holder&gt;


model

/**
 * @创建人 sky
 * @创建时间 16/8/27 上午11:59
 * @类描述
 */
public class ListModel {

    public String title;
}

/**
 * holder
 */
public class ItemHolder extends SKYHolder&lt;ListModel&gt; {

    public ItemHolder(View view) {
        super(view);
    }

    @Override public void bindData(ListModel listModel, int i) {

    }
}
</code></pre><p><img src="https://skyJinc.github.io/images/sky架构/31.png" alt="图1"></p>
<p>这里使用了<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a> 插件</p>
<p><img src="https://skyJinc.github.io/images/sky架构/32.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/33.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/34.png" alt="图1"></p>
<p>builder里配置</p>
<p><img src="https://skyJinc.github.io/images/sky架构/35.png" alt="图1"></p>
<p>开始写业务</p>
<p>View层接口定义 </p>
<pre><code>//设置数据
void setData(List&lt;ListModel&gt; listModelList);
</code></pre><p>Biz层接口定义</p>
<pre><code>/**
 * 加载数据
 */
@Background(BackgroundType.WORK) void loadData();
</code></pre><p><img src="https://skyJinc.github.io/images/sky架构/36.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/37.png" alt="图1"></p>
<h5 id="业务逻辑-display-跳转调度-拦截器"><a href="#业务逻辑-display-跳转调度-拦截器" class="headerlink" title="业务逻辑 - display 跳转调度  拦截器"></a>业务逻辑 - display 跳转调度  拦截器</h5><p>个人比较喜欢 把跳转写到当前类，模仿fragment 写法</p>
<p><img src="https://skyJinc.github.io/images/sky架构/38.png" alt="图1"></p>
<p>display里包含了所有intent 和 fragment 方法</p>
<p><img src="https://skyJinc.github.io/images/sky架构/39.png" alt="图1"></p>
<p>为什么要使用display来跳转呢？ </p>
<p>如果需求是 想拦截跳转前 验证是否登陆 该如何处理？</p>
<p>Sky架构– ISKYBind 接口里 设置 display拦截器 </p>
<p>这里有Display Start和End 拦截器 根据需求我们设置Start拦截器</p>
<p><img src="https://skyJinc.github.io/images/sky架构/40.png" alt="图1"></p>
<p>定义拦截器</p>
<p><img src="https://skyJinc.github.io/images/sky架构/41.png" alt="图1"></p>
<p>设置拦截器</p>
<p><img src="https://skyJinc.github.io/images/sky架构/42.png" alt="图1"></p>
<p>我们在loginActivity 页面 点击登陆以后 跳转到 ListActivity里</p>
<p><img src="https://skyJinc.github.io/images/sky架构/43.png" alt="图1"></p>
<h5 id="业务逻辑-拦截器"><a href="#业务逻辑-拦截器" class="headerlink" title="业务逻辑 - 拦截器"></a>业务逻辑 - 拦截器</h5><p><img src="https://skyJinc.github.io/images/sky架构/44.png" alt="图1"></p>
<p>跟display类似，通过demo 项目自己可以研究一下，根据不同业务需求来添加拦截器</p>
<h5 id="业务逻辑-视图切换"><a href="#业务逻辑-视图切换" class="headerlink" title="业务逻辑 - 视图切换"></a>业务逻辑 - 视图切换</h5><p><img src="https://skyJinc.github.io/images/sky架构/45.png" alt="图1"></p>
<pre><code> //进度布局
void layoutLoadingId(@LayoutRes int layoutId);
//错误布局
void layoutEmptyId(@LayoutRes int layoutId);
//业务错误布局
void layoutBizErrorId(@LayoutRes int layoutId);
//网络错误布局
void layoutHttpErrorId(@LayoutRes int layoutId);

Activity里调用 调用来切换
showHttpError();
showContent();
showLoading();
showEmpty();
showBizError();
</code></pre><p>注:sky架构采用 ViewStub 延迟加载</p>
<p>单个Activity布局设置，如果想所有的View层布局都有默认布局？</p>
<p>实现 SKYIViewCommon 接口</p>
<pre><code>@Override
public int layoutLoading() {
    return 0;
}

@Override
public int layoutEmpty() {
    return 0;
}

@Override
public int layoutBizError() {
    return 0;
}

@Override
public int layoutHttpError() {
    return 0;
}
</code></pre><p>绑定<br><img src="https://skyJinc.github.io/images/sky架构/46.png" alt="图1"></p>
<p>优先级: 设置单个activity优先，如果activity没有设置，获取全局默认布局</p>
<h5 id="业务逻辑-全局Biz-执行业务"><a href="#业务逻辑-全局Biz-执行业务" class="headerlink" title="业务逻辑 - 全局Biz 执行业务"></a>业务逻辑 - 全局Biz 执行业务</h5><p>例子，LoginActivity页面登陆后 跳转到 ListActivity页面 获取数据后，通知LoginActivity 修改按钮名称</p>
<p>改进一下Demo </p>
<p>我们在ListBiz里 调用 LoginBiz的业务 告诉它进行刷新</p>
<p>写一个业务接口 更新按钮的<br><img src="https://skyJinc.github.io/images/sky架构/47.png" alt="图1"></p>
<p><img src="https://skyJinc.github.io/images/sky架构/48.png" alt="图1"></p>
<p>说明: 在任何都可以调用业务接口， </p>
<pre><code>SKYHelper.biz(ILoginBiz.class)；

参数可以是任何业务接口的class, 不必担心返回空值，因为已经做了处理，因为biz的生命周期是跟着View层走，所以如果你调用了已经销毁的Biz业务，它会执行空方法，不会报空指针异常。。
</code></pre><h5 id="业务逻辑-公共业务接口-ICommon"><a href="#业务逻辑-公共业务接口-ICommon" class="headerlink" title="业务逻辑 - 公共业务接口 ICommon"></a>业务逻辑 - 公共业务接口 ICommon</h5><p>没有View层，只有业务逻辑 可以定义公共的业务接口进行业务的执行</p>
<p>后续版本会根据 <a href="https://github.com/google/agera" target="_blank" rel="external">agera</a> 进行修改，采用 观察者模式 进行获取数据，更新界面</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>还有一些使用我没有进行说明，比如 下拉刷新，分页加载，toolbar 绑定等等…<br>可以看源代码的 <strong><em><a href="https://github.com/skyJinc/sky/blob/master/app/src/main/java/jc/sky/view/SKYBuilder.java" target="_blank" rel="external">SKYBuilder</a></em></strong> </p>
<p>下载Demo 看看 调试调试。。。<br><a href="https://github.com/skyJinc/SkyApp" target="_blank" rel="external">DEMO</a></p>
<p>原理和实现 都会在后续的文章写出来。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论MVC或是MVP模式都不可避免地存在一个弊端：&lt;br&gt;&lt;code&gt;额外的代码复杂度及学习成本&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac + Jenkins + Gradle + Git = 可持续集成架构搭建</title>
    <link href="http://www.jincanshen.com/2016/08/22/%E5%8F%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://www.jincanshen.com/2016/08/22/可持续集成/</id>
    <published>2016-08-22T02:45:26.000Z</published>
    <updated>2016-08-22T11:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>简化打包流程…</p>
<a id="more"></a>
<h3 id="Tomact"><a href="#Tomact" class="headerlink" title="Tomact"></a>Tomact</h3><p><a href="http://tomcat.apache.org/" target="_blank" rel="external">下载地址</a></p>
<p>Mac 记得下载.gz</p>
<p>为了方便 我设置了环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mac 命令</div><div class="line">1.vim .bash_profile</div><div class="line">2.export PATH=$&#123;PATH&#125;:你的路径/apache-tomcat-9.0.0/bin</div><div class="line">3.保存退出 :wq</div><div class="line">4.生效 source .bash_profile</div><div class="line">5.启动 startup.sh</div></pre></td></tr></table></figure>
<p><a href="http://localhost:8080" target="_blank" rel="external">查看Tomcat是否启动</a></p>
<h3 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><p><a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war" target="_blank" rel="external">下载地址</a></p>
<p>将下载的jenkins.war包直接放到tomcat下的webapps目录，启动tomcat即可安装完成</p>
<p><a href="http://localhost:8080/jenkins/" target="_blank" rel="external">查看Jenins</a></p>
<p>如果显示一下内容<br><img src="https://skyJinc.github.io/images/jenkins/1.png" alt="图1"></p>
<p>按照提示我们执行mac命令 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code> 得到Administrator password，输入后点击Continue，如下：<br><img src="https://skyJinc.github.io/images/jenkins/4.png" alt="图"><br>剩下的等 安装好插件就好～</p>
<h3 id="Jenkins设置"><a href="#Jenkins设置" class="headerlink" title="Jenkins设置"></a>Jenkins设置</h3><h4 id="系统设置-gt-SDK"><a href="#系统设置-gt-SDK" class="headerlink" title="系统设置 -&gt; SDK"></a>系统设置 -&gt; SDK</h4><p><img src="https://skyJinc.github.io/images/jenkins/3.png" alt="图"></p>
<h4 id="管理插件-安装插件"><a href="#管理插件-安装插件" class="headerlink" title="管理插件 - 安装插件"></a>管理插件 - 安装插件</h4><p><img src="https://skyJinc.github.io/images/jenkins/6.png" alt="图"></p>
<h4 id="编辑插件内容"><a href="#编辑插件内容" class="headerlink" title="编辑插件内容"></a>编辑插件内容</h4><p><img src="https://skyJinc.github.io/images/jenkins/7.png" alt="图"></p>
<h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><h4 id="1-新建"><a href="#1-新建" class="headerlink" title="1.新建"></a>1.新建</h4><p><img src="https://skyJinc.github.io/images/jenkins/8.png" alt="图"></p>
<h4 id="2-设置参数"><a href="#2-设置参数" class="headerlink" title="2.设置参数"></a>2.设置参数</h4><p><img src="https://skyJinc.github.io/images/jenkins/9.png" alt="图"></p>
<h4 id="3-设置源码"><a href="#3-设置源码" class="headerlink" title="3.设置源码"></a>3.设置源码</h4><p>说明：这里我主要是用了github和SSH密钥，如果使用svn 或者 git 账号和密码方式，自行增加，不会的留言提问哈。。<br><img src="https://skyJinc.github.io/images/jenkins/10.png" alt="图"></p>
<h4 id="4-设置源码"><a href="#4-设置源码" class="headerlink" title="4.设置源码"></a>4.设置源码</h4><p><img src="https://skyJinc.github.io/images/jenkins/11.png" alt="图"></p>
<h4 id="5-输出内容过滤"><a href="#5-输出内容过滤" class="headerlink" title="5.输出内容过滤"></a>5.输出内容过滤</h4><p><img src="https://skyJinc.github.io/images/jenkins/12.png" alt="图"></p>
<h4 id="6-开始构建"><a href="#6-开始构建" class="headerlink" title="6.开始构建"></a>6.开始构建</h4><p><img src="https://skyJinc.github.io/images/jenkins/13.png" alt="图1"></p>
<h4 id="7-查看构建内容"><a href="#7-查看构建内容" class="headerlink" title="7.查看构建内容"></a>7.查看构建内容</h4><p><img src="https://skyJinc.github.io/images/jenkins/14.png" alt="图1"></p>
<h3 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h3><p>1.多渠道打包配置 -（使用python 往APK添加渠道文件）<br>2.svn 构建配置<br>3.构建成功后发送邮件配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简化打包流程…&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UI样式</title>
    <link href="http://www.jincanshen.com/2016/01/29/UI%E6%A0%B7%E5%BC%8F/"/>
    <id>http://www.jincanshen.com/2016/01/29/UI样式/</id>
    <published>2016-01-29T11:57:32.000Z</published>
    <updated>2016-08-29T12:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Material-Design时代"><a href="#Material-Design时代" class="headerlink" title="Material Design时代"></a>Material Design时代</h2><p>官方Material Design详细介绍文档：<a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">http://www.google.com/design/spec/material-design/introduction.html</a></p>
<p>官方Blog关于Material Design的专题文章一共有三篇：</p>
<p><a href="http://android-developers.blogspot.jp/2014/10/appcompat-v21-material-design-for-pre.html" target="_blank" rel="external">AppCompat v21 — Material Design for Pre-Lollipop Devices!</a></p>
<p><a href="http://android-developers.blogspot.jp/2014/10/implementing-material-design-in-your.html" target="_blank" rel="external">Implementing material design in your Android app</a></p>
<p><a href="http://android-developers.blogspot.jp/2014/10/material-design-on-android-checklist.html" target="_blank" rel="external">Material Design on Android Checklist</a></p>
<a id="more"></a>
<h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><h3 id="Tangible-Surfaces-有型的外观"><a href="#Tangible-Surfaces-有型的外观" class="headerlink" title="Tangible Surfaces 有型的外观"></a>Tangible Surfaces 有型的外观</h3><p>UI由数字化的纸墨构成。表层和它带有的阴影为应用提供了可视化的效果。你可以触摸并观察他的运动，这个数字化的设计具有移动，扩张，或者转换的能力，帮助你创建灵活的UI。</p>
<h4 id="Shadows"><a href="#Shadows" class="headerlink" title="Shadows"></a>Shadows</h4><p>表面的位置和深度导致了在亮度和阴影方面的微弱变化。新的elevation 属性允许你在Z轴上指定View的位置，然后框架会为该View底部的items加上实时的动态阴影。你可以在布局中明确的以dp为单位设置它的高度。</p>
<pre><code>&lt;ImageView …
   android:elevation=&quot;8dp&quot; /&gt;
</code></pre><p>你也可以在代码中通过getElevation()/setElevation()设置。阴影是添加到轮廓上的，默认来自背景。比如，你可以设置一个圆形的drawable作为floating action button的 背景。它会自动转化成适当的阴影。如果你需要手指去控制一个View的阴影，可以设置一个ViewOutlineProvider，它允许你在getOutline()中提供一个自定义的Outline.</p>
<h4 id="Cards"><a href="#Cards" class="headerlink" title="Cards"></a>Cards</h4><p>对于创建带有不同信息内容的碎片，Cards是一种常见的模式。supportV7下的CardView可以帮助你方便的实现，并提供了轮廓和阴影。</p>
<pre><code>&lt;android.support.v7.widget.CardView
  android:layout_width=&quot;match_parent&quot;
  android:layout_height=&quot;wrap_content&quot;&gt;
  &lt;!-- Your card content --&gt;

&lt;/android.support.v7.widget.CardView&gt;
</code></pre><p>CardView继承自FrameLayout并提供了默认的elevation 和 圆角，使得cards在不同的平台间保持一致。你也可以通过cardElevation和cardCornerRadius属性自定义它们的值。注意，Cards不是唯一实现维度效果的方式，你应该警惕过度的使用<br><a href=":http://www.google.com/design/spec/components/cards.html#cards-usage">警惕</a></p>
<h4 id="Print-like-Design-打印式风格"><a href="#Print-like-Design-打印式风格" class="headerlink" title="Print-like Design 打印式风格"></a>Print-like Design 打印式风格</h4><p>Material利用了经典的打印设计，使内容前部和中心的布局变得整洁和简约。刻意大胆的颜色选择，刻意的空白，美观的印刷风格和强烈的格子线条为你创建一种有层次有意义有焦点的效果。</p>
<h5 id="Typography-活字印刷"><a href="#Typography-活字印刷" class="headerlink" title="Typography 活字印刷"></a>Typography 活字印刷</h5><p>Android 5.0更新了Roboto样式，不论多大的text，展示起来都会美观和简洁。添加了一种新的中等高度属性(android:fontFamily=”sans-serif-medium”) 和新的AppAppearance样式为了平衡内容密度和阅读的舒适感,实现了推荐的打印式缩放的。比如你可以简单的通过 android:textAppearance=”@android:style/TextAppearance.Material.Title” 设置  “Title”风格。在旧的版本中可以使用AppCompat support library的样式： “@style/TextAppearance.AppCompat.Title”.</p>
<h5 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h5><p>调色板为你的应用带来了品牌营销和个性化，通过以下属性可以方便的控制UI的着色：<br><img src="http://img.blog.csdn.net/20141101114107468" alt="图"><br>主调色彩：主调色彩是用于应用品牌推广的色彩。作为action bar的背景色最近的任务title和其它边缘效果。</p>
<p>强调色彩：鲜明的扩展了主调色彩。应用于框架的控制。比如EditText，Switch</p>
<p>主调的暗色： Darker作为主调色彩的加深，应用于状态栏 status bar.</p>
<p>更多用于控制色彩的属性，可以参考：colorControlNormal.colorControlActivated.colorControlHighlight, colorButtonNormal, colorSwitchThumbNormal, colorEdgeEffect, statusBarColor and navigationBarColor.</p>
<p>AppCompat 为以上功能提供了大量的子集，允许你为Lollipop之前的系统控制色彩。</p>
<h4 id="Dynamic-color-动态的色彩"><a href="#Dynamic-color-动态的色彩" class="headerlink" title="Dynamic color 动态的色彩"></a>Dynamic color 动态的色彩</h4><p>Material Design 鼓励动态色彩的使用，特别是当你拥有丰富的iamge的时候。新的Palette的support library 支持从图片中抽取一小部分的色彩去设计你的UI。创造出一种更逼真的体验。你也可以添加动静的结合效果，比如前部的text color的变化，如下两种TextView部分色彩的切换：<br><img src="http://img.blog.csdn.net/20141101191330069" alt="图"><br><img src="http://img.blog.csdn.net/20141101191449453" alt="图"></p>
<h4 id="Authentic-Motion-真实的动效"><a href="#Authentic-Motion-真实的动效" class="headerlink" title="Authentic Motion 真实的动效"></a>Authentic Motion 真实的动效</h4><p>有型的表面不应该像电影中的跳跃式的切换，它们的移动应该帮助引导用户的焦点，建立控件关系以及保持连贯性。Meterial 响应触摸事件去确认你的交互，所有的变化会从你的Touch点辐射开来。所有的运动都是有意义并且友好的，有助于用户更好的理解。</p>
<h5 id="Activity-Fragment切换"><a href="#Activity-Fragment切换" class="headerlink" title="Activity + Fragment切换"></a>Activity + Fragment切换</h5><p>通过声明“shared elements” ，在两种状态之间你可以创建一个平滑的切换，<br>album_grid.xml</p>
<pre><code>&lt;ImageView
  …
  android:transitionName=&quot;@string/transition_album_cover&quot; /&gt;
</code></pre><p>album_details.xml</p>
<pre><code>&lt;ImageView
  …
  android:transitionName=&quot;@string/transition_album_cover&quot; /&gt;
</code></pre><p>AlbumActivity.java</p>
<pre><code>Intent intent = new Intent();
String transitionName = getString(R.string.transition_album_cover);
…
ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(activity,
                                albumCoverImageView,   // The view which starts the transition
                                transitionName    // The transitionName of the view we’re transitioning to
                                );
ActivityCompat.startActivity(activity, intent, options.toBundle());
</code></pre><p>这里我们在两个不同的屏幕间定义了相同的transitionName 。当你启动一个新的Activity，它的切换将会自动的动画起来。对于进入和退出的元素，你可以自由编排。</p>
<h5 id="Ripples（涟漪）"><a href="#Ripples（涟漪）" class="headerlink" title="Ripples（涟漪）"></a>Ripples（涟漪）</h5><p><img src="http://img.blog.csdn.net/20141101114717864" alt="tu"><br>Materials以一种泼墨的涟漪的方式响应用户的触摸事件。你可以通过使用或者继承Theme.Material主题，即可达到这种默认的效果。你可以通过简单的封装将这种ripple效果添加到自己的drawables上。自定义View应该使用  View#drawableHotspotChanged 回调方法把touch的位置传播到它们的drawables上，以便ripple可以知道起始点。</p>
<pre><code>&lt;ripple
  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
  android:color=&quot;@color/accent_dark&quot;&gt;
  &lt;item&gt;
      &lt;shape
           android:shape=&quot;oval&quot;&gt;
          &lt;solid android:color=&quot;?android:colorAccent&quot; /&gt;
      &lt;/shape&gt;
 &lt;/item&gt;
&lt;/ripple&gt;
</code></pre><h5 id="StateListAnimator"><a href="#StateListAnimator" class="headerlink" title="StateListAnimator"></a>StateListAnimator</h5><p>Materials 也响应了用户抬起手指的操作。类似磁铁吸引的效果。你可以通过tranlationZ属性实现。它类似于elevation属性，但主要是用于时间较短，转瞬即逝的效果，比如 Z = elevation + translationZ。这个新的stateListAnimator 属性允许你在用户touch的时候简单的在translationZ上动画。button默认会有这种效果。</p>
<p>layout/your_layout.xml</p>
<pre><code>&lt;ImageButton …
  android:stateListAnimator=&quot;@anim/raise&quot; /&gt;
</code></pre><p>anim/raise.xml</p>
<pre><code>&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
&lt;item android:state_enabled=&quot;true&quot; android:state_pressed=&quot;true&quot;&gt;
     &lt;objectAnimator
            android:duration=&quot;@android:integer/config_shortAnimTime&quot;
            android:propertyName=&quot;translationZ&quot;
            android:valueTo=&quot;@dimen/touch_raise&quot;
            android:valueType=&quot;floatType&quot; /&gt;
&lt;/item&gt;
&lt;item&gt;
    &lt;objectAnimator
            android:duration=&quot;@android:integer/config_shortAnimTime&quot;
            android:propertyName=&quot;translationZ&quot;
            android:valueTo=&quot;0dp&quot;
            android:valueType=&quot;floatType&quot; /&gt;
&lt;/item&gt;
&lt;/selector&gt;
</code></pre><h5 id="Reveal"><a href="#Reveal" class="headerlink" title="Reveal"></a>Reveal</h5><p>material 过渡效果中的一个标志是通过延伸一个圆形的面板来展示新的内容。增强了作为所有转换起点的触摸点, 它是迅速向外扩散的. 你可以使用下面的Animator来实现：</p>
<pre><code>Animator reveal = ViewAnimationUtils.createCircularReveal(
viewToReveal, // The new View to reveal
centerX,      // x co-ordinate to start the mask from
centerY,      // y co-ordinate to start the mask from
startRadius,  // radius of the starting mask
endRadius);   // radius of the final mask
reveal.start();
</code></pre><h5 id="Interpolators-插值器"><a href="#Interpolators-插值器" class="headerlink" title="Interpolators 插值器"></a>Interpolators 插值器</h5><p><img src="http://img.blog.csdn.net/20141101114835989" alt="tu"></p>
<p>运动应该是慎重的，平滑且精确的。而不是简单的渐入渐出。在 Material Design中，对象更倾向于快速的并舒适的启动。通过下面的示例可以看到，在将要到达终点前的那段位置花费了更少的时间。总的来说，用户不会等待较长时间，运动的负面效果就变得最小化了。有一种新的插值器，可以达到这种效果<a href="https://developer.android.com/reference/android/R.interpolator.html?utm_campaign=L-Developer-launch#fast_out_slow_in" target="_blank" rel="external">https://developer.android.com/reference/android/R.interpolator.html?utm_campaign=L-Developer-launch#fast_out_slow_in</a></p>
<p>对于进入和退出屏幕效果，请分别参考：  linear-out-slow-in 和 fast-out-linear-in interpolators respectively.</p>
<h4 id="Adaptive-Design-and-UI-Patterns"><a href="#Adaptive-Design-and-UI-Patterns" class="headerlink" title="Adaptive Design (and UI Patterns)"></a>Adaptive Design (and UI Patterns)</h4><p>material 最终的核心概念是创建一种自适应于不同大小形状设备的设计，从手表到TV。自适应设计技术帮助我们实现了不同的设备但相同的底层系统体现为不同的View。每个View对那个设备来说，都是量身定做的。色彩，图片，层次，空间的相对关系都保持不变。material design 系统提供了便利的组件和模式帮你构建一个如此有扩展性的设计</p>
<p>Toolbar</p>
<p>与Actionbar很类似，但是更加方便，不同于标准的Action bar，toolBar就像View层级中的任何一个东西。因此你可以在任何地方进行放置，与其它的View交错，移动，对滑动事件的响应等等。你可以通过调用Activity,setActionBar()方法把ToolBar作为你的Activity的ActionBar</p>
<p><img src="http://img.blog.csdn.net/20141101114912680" alt="tu"></p>
<p>在这个例子中，蓝色的toolbar是一个可扩展高度，覆盖在屏幕内容上侧并且提供了导航按钮。注意：在这个列表和细节中，使用的ToolBar超过了2个。</p>
<p>Material Design 让你的应用具有可理解，美观，逼真的动效及自适应的能力。希望你可以遵从这些设计原则并通过上述提供的new API和一些兼容库帮助你的App实现Material Design。</p>
<h2 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h2><p>###Signature element: 阴影</p>
<p>阴影用于和前部的元素交互，帮助聚焦和建立层级效果。</p>
<p>In Code:在5.0系统里，这样的阴影效果直接由属性：android:elevation 和 android:translationZ 提供，而在之前的版本，阴影通常由PNG图片资源来实现。<br><img src="http://img.blog.csdn.net/20141101115024128" alt="tu"></p>
<p>Surfaces and layering.</p>
<p>阴影和表层被用于连贯和结构性的情景中。每一个阴影标示着一个新的表层，这些表层的构建需要细心和深思熟虑。一个屏幕中通常拥有2到10个表层，避免太多的内嵌层。可滑动的内容滑动到屏幕的边界或者另一个表层后面的时候铸造了一层覆盖在另一个表层上的阴影。永远不要剪裁一个可见边界的元素这样会导致一种没有边界的感觉。换句话说，你应该很少滑动表层上的内容，而是滑动整个表层。</p>
<p>In Code: 在使用ListView和ScrollView的时候，使用 android:clipToPadding=false 来避免边界的剪裁。</p>
<p>表层应该是简单，而且是纯色的背景。</p>
<p>A Bold、Print-Like Aesthetic 一种加粗，打印风格的审美</p>
<p>你所展示的内容来自于一种经典的打印模式，重点在于色彩的使用，有语境的图片和结构性的空白区域</p>
<p><img src="http://img.blog.csdn.net/20141101115254125" alt="tu"></p>
<p>Primary and accent colors.</p>
<h3 id="Signature-element-主调色彩和强调色彩"><a href="#Signature-element-主调色彩和强调色彩" class="headerlink" title="Signature element: 主调色彩和强调色彩"></a>Signature element: 主调色彩和强调色彩</h3><p>在颜色层面背景和关键的组件上，使用了一种主调色彩和一种强调色彩，比如text和checkbox。这种强调色彩和基调色彩形成了鲜明的对比，比如一个app可以使用一种深蓝色作为基调颜色，而把霓虹色作为强调的颜色。</p>
<p>这种强调的色彩是极其鲜明的，通常用于关键的组件上，引起用户的注意，比如一个floating button，selected tab 或表格区域。</p>
<p>In code: 通过在你的主题中设置 android:colorPrimary and android:colorAccent属性（如果使用appCompat，不用再去设置“android”前缀了），AppCompat将会自动的为那些text，checkbox和一些在L之前的组件着色。</p>
<h3 id="Signature-element-透明的状态栏"><a href="#Signature-element-透明的状态栏" class="headerlink" title="Signature element:透明的状态栏"></a>Signature element:透明的状态栏</h3><p>在5.0系统上，status bar会被填充匹配app的基调，或者当前屏幕的内容的色彩。对于全屏填充的Image效果，status bar可以是透明的。</p>
<p>可以通过在你的主题中设置android:colorPrimaryDark 或者 android:statusBarColor或者调用Window.setStatusBarColor来实现。</p>
<p>icon/photos/images和其它前部元素的表层会被“墨水”着色。它们不需要阴影也不用使用梯度效果。</p>
<p>颜色可以从图片中抽取用于适配在表层的UI元素。</p>
<p>InCode: 通过Palette support library来实现。</p>
<p>Signature element: 使用material design的icon</p>
<p>icons 的使用请遵从 system icon guidelines，标准的icons请使用material design的icon，（这个已经在GitHub中开源）</p>
<p>向导：<a href="http://www.google.com/design/spec/style/icons.html#icons-system-icons" target="_blank" rel="external">http://www.google.com/design/spec/style/icons.html#icons-system-icons</a></p>
<p>资源：<a href="http://www.google.com/design/spec/resources/sticker-sheets.html#sticker-sheets-components" target="_blank" rel="external">http://www.google.com/design/spec/resources/sticker-sheets.html#sticker-sheets-components</a></p>
<p>照片通常是沉浸并且是全屏的，比如，对于详情的界面，使用一种边缘到边缘的模式，甚至可以出现在app bar或者 status bar的底部。</p>
<p>In code: 新的 Toolbar widget 可以是透明的并且直接放在你的布局中，对于status bar的问题,看以参考在Stack Overflow 上的相关问题：<a href="http://stackoverflow.com/questions/26440879/how-do-i-use-drawerlayout-to-display-over-the-actionbar-toolbar-and-under-the-st/26440880" target="_blank" rel="external">StackOverflow</a></p>
<h3 id="Signature-element-适当的尺寸"><a href="#Signature-element-适当的尺寸" class="headerlink" title="Signature element: 适当的尺寸"></a>Signature element: 适当的尺寸</h3><p>合适的地方，text内容，app titles,应该对齐3个keylines<br><a href="http://www.google.com/design/spec/layout/metrics-and-keylines.html#metrics-and-keylines-keylines-and-spacing" target="_blank" rel="external">官网</a></p>
<p>在手机上，那些 keylines 距离左边是16dp和72dp，距离屏幕右边缘是16dp。在平板上是24dp和80dp。</p>
<p>UI元素的对齐方式和大小应该根据一个8dp的网格。比如，app bar在手机上为56dp，在平板上是64dp。Padding和Margins可以使用像：8dp,16dp,24dp的值等等，更精确的text位置是使用一个4dp的网格<br><img src="http://img.blog.csdn.net/20141101115351141" alt="tu"></p>
<h2 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h2><h3 id="Keylines"><a href="#Keylines" class="headerlink" title="Keylines"></a>Keylines</h3><h4 id="Authentic-Motion-真实的动效-1"><a href="#Authentic-Motion-真实的动效-1" class="headerlink" title="Authentic Motion 真实的动效"></a>Authentic Motion 真实的动效</h4><p>在不同的app上下文和状态下，动效可以提供一种可视化和连贯的体验。通过小规模的使用切换动画可以增加一些情趣。而不是为了动效而动效。总的来说，UI和内容元素不会简单的消失或者出现，它们会以动画的方式移动入到一个单元或者单独的出现。</p>
<h4 id="Signature-element-“hero”切换动画"><a href="#Signature-element-“hero”切换动画" class="headerlink" title="Signature element: “hero”切换动画"></a>Signature element: “hero”切换动画</h4><p>当你按下一个条目去看详情的时候。这里有个叫“hero”的切换动画，它会移动并且缩放它所在的位置和详情屏幕之间的条目。<br>InCode：在SDK中它被叫做 “shared element transitions” ，support版本的FragmentTransaction也支持了shared element support。</p>
<p><img src="http://img.blog.csdn.net/20141101115533149" alt="tu"></p>
<p>“Hero” Transiton</p>
<p>Signature element: Ripple effects</p>
<p>Ripple effects 为你按下条目的增加了反馈效果。</p>
<p>InCode：默认的 android:selectableItemBackground 和 android:selectableItemBackgroundBorderless 拥有这种效果，或者你可以使用RippleDrawable (<ripple>) 去自定义效果。在5.0之前的设备上，ripples没有这种预期的效果，因此，遵从默认的android:selectableItemBackground 行为。</ripple></p>
<p>Signature element:  circular “reveal” animation.</p>
<p>UI元素可以通过一个圆形的”reveal”动画出现。</p>
<p>InCode：查看文档或者ViewAnimationUtils类。</p>
<p>Signature element:Vector动画图标</p>
<p>在更微妙更赏心悦目的情况下使用动画，比如去转换icon 的状态和text的状态。比如，一个“+”图标可以变形为一个“x”标识，或者一个概述的图标可以变成一个栅栏效果。</p>
<p>InCode：icon的变化可以通过AnimatedStateListDrawable 和相应的XML文件来实现，你可以在Google I/O app源码中找到。它支持了动画的vector图标。</p>
<p>动画和切换通常在300ms内。</p>
<p>交叉淡入淡出通常被平移和滑动切换代替：竖直的滑动产生的底部导航，水平滑动产生的侧面导航。对于滑动的转换，加速和微小的减速要好于简单的线性移动。</p>
<p><a href="http://www.google.com/design/spec/animation/authentic-motion.html#" target="_blank" rel="external">参考</a></p>
<h4 id="Adaptive-Design（UI-Patterns）"><a href="#Adaptive-Design（UI-Patterns）" class="headerlink" title="Adaptive Design（UI Patterns）"></a>Adaptive Design（UI Patterns）</h4><p>有型的外表，大胆的图形设计，加上有意义的动画效果带来了一种连贯跨设备的体验，无论在手机，平板，笔记本，TV，可穿戴设备，汽车上，等都有同样的体验效果。另外，下面的关键的UI 设计模式有助于在不同设备之间建立一种连贯的体验。</p>
<p>app使用了响应式设计，确保了在不同尺寸的屏幕和不同的方向上能够适当的布局。可以参考平板App样式的清单表去优化那些面向平板的App</p>
<p><a href="http://developer.android.com/distribute/essentials/quality/tablets.html" target="_blank" rel="external">参考</a></p>
<p>在material design中，详情界面的切换通常都是“Hero”动画的。在多面板布局中，app可以使用多个toobar去代替一些下一步的相关操作。</p>
<h4 id="Signature-element-FAB"><a href="#Signature-element-FAB" class="headerlink" title="Signature element: FAB"></a>Signature element: FAB</h4><p>如果合适的话，App推荐floating action button作为一个屏幕上的关键操作。FAB是一个圆形外表，附带有阴影，表面色彩采用亮色，强调色。它可以用于执行一些主要的操作，比如，发送，撰写，创建，添加，或者搜索，大约8dp的elevation。通常悬浮在屏幕的右下角，或者边界的中心位置。<br><img src="http://img.blog.csdn.net/20141101115728968" alt="tu"></p>
<h3 id="App-Bar"><a href="#App-Bar" class="headerlink" title="App Bar"></a>App Bar</h3><h4 id="Signature-element"><a href="#Signature-element" class="headerlink" title="Signature element:"></a>Signature element:</h4><p>App使用了标准的Android App bar，这个App Bar没有使用app图标。颜色和印刷效果替代了品牌的推广。这个App Bar带有阴影，或者拥有一个带有阴影的表层。通常App Bar 4dp elevation。</p>
<p>InCode：在5.0中使用新的ToolBar Widget引入到View层级视图中。AppCompat提供了兼容的android.support.v7.widget.Toolbar来实现它。</p>
<p>app bar可能是标准高度的2到3倍，在滑动的时候，app bar可以恢复到正常高度。</p>
<p>app bar在有些情况下可以完全透明，可以在一个图片之上附有text和操作，比如Google Play Newsstand 应用</p>
<p><a href="http://www.google.com/design/spec/style/imagery.html#imagery-principles" target="_blank" rel="external">参考</a></p>
<h4 id="App-bar-title"><a href="#App-bar-title" class="headerlink" title="App bar title"></a>App bar title</h4><p>InCode：在使用Toobar widge的时候，请使用 android:contentInsetStart属性。</p>
<p>在适当的时候，往下滑的时候，app bar可以滑出屏幕，为内容留下更多垂直方向的空间。往上滑动的时候，app bar可以恢复显示。（这个式样：quickReturn）</p>
<h4 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h4><p>Signature element:Tabs应该遵从最新的 material design 设计风格。在垂直方向没有分割线，如果app使用了top-level的话，tab可以作为app bar的一部分<br><a href="http://www.google.com/design/spec/components/tabs.html#tabs-usage" target="_blank" rel="external">参考</a></p>
<p>InCode: 可以参考在SDK中的示例 SlidingTabsBasic 或者Google I/O app source（My Schedule 部分）另外加上 前两天分享的 SlidingTabStrip</p>
<p>Tabs应该支持手势滑动</p>
<p>InCode: 所有的Tabs应该使用support lib中的ViewPager 控件</p>
<p>在选中Tabs时，应该有一个前部颜色的变化或者使用强调色彩的颜色条。在tabs滑动的时候，这个线条应该平滑的响应。<br><img src="http://img.blog.csdn.net/20141101115903609" alt="tu"></p>
<h4 id="抽屉导航"><a href="#抽屉导航" class="headerlink" title="抽屉导航"></a>抽屉导航</h4><p>在app bar最左边的icon是一个抽屉的指示器。<a href="http://www.google.com/design/spec/layout/structure.html#structure-app-bar" target="_blank" rel="external">参考</a></p>
<p>app icon 在app bar中是不可见的。可选择的，在早期版本中，如果app拥有一个抽屉，那么最左边的app icon会保留并且会变窄，比如在4.0中。</p>
<p>标准的抽屉：在手机上不要宽于320dp，在平板上不要宽于400dp,但是不要小于屏幕宽度 – 标准的toolbar高度，比如在Nexus5中：360dp – 56dp = 304dp</p>
<p>每一个抽屉条目的应该沿着grid网格，所有的行高为 48dp，上下8dp边距。</p>
<p>Text 和 icon 应该沿着主线<br><img src="http://img.blog.csdn.net/20141101115945093" alt="tu"><br>越来越多的App来自google play生态系统将会更新到Material Design，预期2014冬季对于Android的设计来说是一个大的变更期。更多关于Material design设计资源，可以参考<a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIJFcNKpAV9B_aQmz2h68fw_" target="_blank" rel="external">YouTube</a>视频</p>
<h2 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h2><h3 id="Material-Design开发资源"><a href="#Material-Design开发资源" class="headerlink" title="Material Design开发资源"></a>Material Design开发资源</h3><p>官方：</p>
<p><a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design介绍</a></p>
<p><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">设计资源</a></p>
<p><a href="https://github.com/google/iosched" target="_blank" rel="external">App:Google  2014</a></p>
<h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程:"></a>视频教程:</h4><p><a href="https://www.youtube.com/watch?v=97SWYiRtF0Y&amp;feature=youtu.be" target="_blank" rel="external">视频1</a></p>
<p><a href="https://www.youtube.com/watch?v=S3H7nJ4QaD8" target="_blank" rel="external">视频2</a></p>
<h4 id="示例集合"><a href="#示例集合" class="headerlink" title="示例集合"></a>示例集合</h4><p><a href="https://github.com/rahulparsani/google-io-2014-compat" target="_blank" rel="external">示例</a></p>
<p><img src="http://img.blog.csdn.net/20141031174001295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHVzaHVhaWM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="tu"></p>
<p><img src="http://img.blog.csdn.net/20141031173911125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHVzaHVhaWM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="tu"></p>
<p><img src="http://img.blog.csdn.net/20141031174045849?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHVzaHVhaWM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="tu"></p>
<h4 id="第三方资源"><a href="#第三方资源" class="headerlink" title="第三方资源"></a>第三方资源</h4><p><a href="https://github.com/gabrielemariotti/cardslib" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141101111954464" alt="tu"></p>
<p><a href="https://github.com/telly/FloatingAction" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141031175941780" alt="tu"></p>
<p><a href="https://github.com/markushi/android-ui" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141101082913420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHVzaHVhaWM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="tu"></p>
<p><img src="http://img.blog.csdn.net/20141031180256125" alt="tu"></p>
<p><a href="https://github.com/ikimuhendis/LDrawer" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141031181405906" alt="tu"></p>
<p><a href="https://github.com/markushi/android-ui" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141101093222308" alt="tu"></p>
<p><a href="https://github.com/andkulikov/transitions-everywhere" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141101111313106" alt="tu"></p>
<p><a href="https://github.com/lewisjdeane/L-Dialogs" target="_blank" rel="external">地址</a></p>
<p><img src="http://img.blog.csdn.net/20141031174950203" alt="tu"></p>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p><strong><em>lightSky</em></strong></p>
<p>学到了很多，谢谢，以下是他的搜集的MaterialDesign 和 个人博客</p>
<p><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Github</a></p>
<p><a href="http://weibo.com/lightSkyStreet" target="_blank" rel="external">个人博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Material-Design时代&quot;&gt;&lt;a href=&quot;#Material-Design时代&quot; class=&quot;headerlink&quot; title=&quot;Material Design时代&quot;&gt;&lt;/a&gt;Material Design时代&lt;/h2&gt;&lt;p&gt;官方Material Design详细介绍文档：&lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html&quot;&gt;http://www.google.com/design/spec/material-design/introduction.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方Blog关于Material Design的专题文章一共有三篇：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.jp/2014/10/appcompat-v21-material-design-for-pre.html&quot;&gt;AppCompat v21 — Material Design for Pre-Lollipop Devices!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.jp/2014/10/implementing-material-design-in-your.html&quot;&gt;Implementing material design in your Android app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.jp/2014/10/material-design-on-android-checklist.html&quot;&gt;Material Design on Android Checklist&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android的大神们</title>
    <link href="http://www.jincanshen.com/2016/01/01/Android%E7%9A%84%E5%A4%A7%E7%A5%9E%E4%BB%AC/"/>
    <id>http://www.jincanshen.com/2016/01/01/Android的大神们/</id>
    <published>2016-01-01T08:45:00.000Z</published>
    <updated>2016-08-29T12:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a><a href="https://github.com/google" target="_blank" rel="external">Google</a></h3><p><img src="https://avatars0.githubusercontent.com/u/1342004?v=3&amp;s=188" alt="">  </p>
<p>google在github上面开源了很多android库应用，尤其是<a href="https://github.com/googlesamples" target="_blank" rel="external">googleSamples</a>,展示了Android最新的示例。</p>
<a id="more"></a>
<h3 id="Jake-Wharton"><a href="#Jake-Wharton" class="headerlink" title="Jake Wharton"></a><a href="https://github.com/JakeWharton" target="_blank" rel="external">Jake Wharton</a></h3><p><img src="https://avatars0.githubusercontent.com/u/66577?v=3&amp;s=188" alt="">  </p>
<p>就职于Square,Andriod大神(Android开发，必定认识此君).擅长Android版本兼容，<a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock</a>,<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a>都已经被收录到android库中。而且参与了很多其他开源项目，非常活跃。</p>
<p><strong>masterpiece</strong>:  </p>
<ul>
<li><a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock</a> <br></li>
<li><a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a><br></li>
<li><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a><br></li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a><br></li>
<li><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="external">DiskLruCache</a><br></li>
<li><a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">u2020</a><br></li>
<li><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="external">RxBinding</a><br></li>
<li><a href="https://github.com/JakeWharton/pidcat" target="_blank" rel="external">pidcat</a><br><br>…</li>
</ul>
<h3 id="Chris-Banes"><a href="#Chris-Banes" class="headerlink" title="Chris Banes"></a><a href="https://github.com/chrisbanes" target="_blank" rel="external">Chris Banes</a></h3><p><img src="https://avatars1.githubusercontent.com/u/227486?v=3&amp;s=188" alt="">  </p>
<p>目前就职于Google,和Jake Wharton遥相呼应，对开源项目贡献也很多。很多项目都是精品，并且紧跟潮流，<a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">cheesesquare</a>就是Android Design library最新的demo.</p>
<p><strong>masterpiece</strong>:  </p>
<ul>
<li><a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh</a> <br></li>
<li><a href="https://github.com/chrisbanes/ActionBar-PullToRefresh" target="_blank" rel="external">ActionBar-PullToRefresh</a> <br></li>
<li><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">PhotoView</a> <br></li>
<li><a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">cheesesquare</a> <br></li>
<li><a href="https://github.com/chrisbanes/philm" target="_blank" rel="external">philm</a> <br></li>
<li><a href="https://github.com/chrisbanes/gradle-mvn-push" target="_blank" rel="external">gradle-mvn-push</a> <br></li>
<li><a href="https://github.com/chrisbanes/photup" target="_blank" rel="external">photup</a> <br><br>…</li>
</ul>
<h3 id="Mark-Murphy"><a href="#Mark-Murphy" class="headerlink" title="Mark Murphy"></a><a href="https://github.com/commonsguy" target="_blank" rel="external">Mark Murphy</a></h3><p><img src="https://avatars0.githubusercontent.com/u/103772?v=3&amp;s=188" alt=""></p>
<p>与前两位相比，Mark Murphy则是专注于写了一本<a href="https://commonsware.com/Android/" target="_blank" rel="external">The Busy Coder’s Guide to Android Development</a>,全面介绍了Android.而且在开源项目也贡献很多。</p>
<p><strong>masterpiece</strong>:  </p>
<ul>
<li><a href="https://github.com/commonsguy/cw-omnibus" target="_blank" rel="external">cw-omnibus</a></li>
<li><a href="https://github.com/commonsguy/cw-advandroid" target="_blank" rel="external">cw-advandroid</a>  </li>
<li><a href="https://github.com/commonsguy/cw-android" target="_blank" rel="external">cw-android</a>  </li>
<li><a href="https://github.com/commonsguy/cwac-camera" target="_blank" rel="external">cwac-camera</a><br>…</li>
</ul>
<h3 id="Sergey-Tarasevich"><a href="#Sergey-Tarasevich" class="headerlink" title="Sergey Tarasevich"></a><a href="https://github.com/nostra13" target="_blank" rel="external">Sergey Tarasevich</a></h3><p><img src="https://avatars3.githubusercontent.com/u/1223348?v=3&amp;s=188" alt=""></p>
<p>这位大神大家可能不熟悉，不过他的<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">UIL</a>图片缓存和加载框架再熟悉不过了。<br>目前这个库还是很活跃，一直在进步。</p>
<p><strong>masterpiece</strong>:  </p>
<ul>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></li>
</ul>
<h3 id="Koushik-Dutta"><a href="#Koushik-Dutta" class="headerlink" title="Koushik Dutta"></a><a href="https://github.com/koush" target="_blank" rel="external">Koushik Dutta</a></h3><p><img src="https://avatars3.githubusercontent.com/u/73924?v=3&amp;s=188" alt=""></p>
<p>就职于ClockworkMod，这位大神也有个图片加载框架，还包含了异步网络请求,<a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a>。</p>
<blockquote>
<p>另外对<a href="https://github.com/CyanogenMod" target="_blank" rel="external">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>from <a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Google&quot;&gt;&lt;a href=&quot;#Google&quot; class=&quot;headerlink&quot; title=&quot;Google&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/google&quot;&gt;Google&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1342004?v=3&amp;amp;s=188&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;google在github上面开源了很多android库应用，尤其是&lt;a href=&quot;https://github.com/googlesamples&quot;&gt;googleSamples&lt;/a&gt;,展示了Android最新的示例。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
